[vset VERSION 4.3]
[comment {-*- tcl -*- doctools manpage}]
[manpage_begin httpd n [vset VERSION]]
[keywords WWW]
[copyright {2018 Sean Woods <yoda@etoyoc.com>}]
[moddesc   {Tcl Web Server}]
[titledesc {A TclOO and coroutine based web server}]
[category  Networking]
[keywords TclOO]
[keywords http]
[keywords httpd]
[keywords httpserver]
[keywords services]
[require Tcl 8.6]
[require httpd [opt [vset VERSION]]]
[require uuid]
[require clay]
[require coroutine]
[require fileutil]
[require fileutil::magic::filetype]
[require websocket]
[require mime]
[require cron]
[require uri]
[require Markdown]
[description]
[para]

This module implements a web server, suitable for embedding in an
application. The server is object oriented, and contains all of the
fundamentals needed for a full service website.

[para]

[section {Minimal Example}]

Starting a web service requires starting a class of type
[cmd httpd::server], and providing that server with one or more URIs
to service, and [cmd httpd::reply] derived classes to generate them.

[example {
tool::define ::reply.hello {
  method content {} {
my puts "<HTML><HEAD><TITLE>IRM Dispatch Server</TITLE></HEAD><BODY>"
my puts "<h1>Hello World!</h1>"
my puts </BODY></HTML>
  }
}
::docserver::server create HTTPD port 8015 myaddr 127.0.0.1
HTTPD add_uri /* [list mixin reply.hello]
}]

[section {Class  ::httpd::mime}]
[list_begin definitions]

[call method [cmd ChannelCopy] [arg in] [arg out] ?[arg args]?]


[call method [cmd html_header] ?[arg title] [emph ""]? ?[arg args]?]


[call method [cmd html_footer] ?[arg args]?]


[call method [cmd http_code_string] [arg code]]


[call method [cmd HttpHeaders] [arg sock] ?[arg debug] [emph ""]?]


[call method [cmd HttpHeaders_Default]]


[call method [cmd HttpServerHeaders]]


[call method [cmd MimeParse] [arg mimetext]]

 Converts a block of mime encoded text to a key/value list. If an exception is encountered,
 the method will generate its own call to the [cmd error] method, and immediately invoke
 the [cmd output] method to produce an error code and close the connection.



[call method [cmd Url_Decode] [arg data]]
 De-httpizes a string.


[call method [cmd Url_PathCheck] [arg urlsuffix]]


[call method [cmd wait] [arg mode] [arg sock]]

[list_end]
 Author: Sean Woods, yoda@etoyoc.com

 Adapted from the "minihttpd.tcl" file distributed with Tclhttpd

 The working elements have been updated to operate as a TclOO object
 running with Tcl 8.6+. Global variables and hard coded tables are
 now resident with the object, allowing this server to be more easily
 embedded another program, as well as be adapted and extended to
 support the SCGI module



[section {Class  ::httpd::reply}]
[list_begin definitions]

[call method [cmd constructor] [arg ServerObj] ?[arg args]?]


[call method [cmd destructor] ?[arg dictargs]?]

 clean up on exit



[call method [cmd close]]

 Close channels opened by this object



[call method [cmd Log_Dispatched]]

 Record a dispatch event



[call method [cmd dispatch] [arg newsock] [arg datastate]]

 Accept the handoff from the server object of the socket
 [enph newsock] and feed it the state [emph datastate]

 Fields the [emph datastate] are looking for in particular are:

 mixin: A key/value list of slots and classes to be mixed into the
 object prior to invoking [cmd Dispatch].

 http: A key/value list of values to populate the object's [emph request]
 ensemble

 All other fields are passed along to the [emph clay] structure of the object.



[call method [cmd Dispatch]]


[call method [cmd html_css]]


[call method [cmd html_header] [arg title] ?[arg args]?]


[call method [cmd html_footer] ?[arg args]?]


[call method [cmd error] [arg code] ?[arg msg] [emph ""]? ?[arg errorInfo] [emph ""]?]


[call method [cmd content]]

 REPLACE ME:
 This method is the "meat" of your application.
 It writes to the result buffer via the "puts" method
 and can tweak the headers via "clay put header_reply"



[call method [cmd EncodeStatus] [arg status]]

 Formulate a standard HTTP status header from he string provided.



[call method [cmd log] [arg type] ?[arg info] [emph ""]?]


[call method [cmd CoroName]]


[call method [cmd DoOutput]]

 Generates the the HTTP reply, streams that reply back across [arg chan],
 and destroys the object.



[call method [cmd FormData]]

 For GET requests, converts the QUERY_DATA header into a key/value list.

 For POST requests, reads the Post data and converts that information to
 a key/value list for application/x-www-form-urlencoded posts. For multipart
 posts, it composites all of the MIME headers of the post to a singular key/value
 list, and provides MIME_* information as computed by the [cmd mime] package, including
 the MIME_TOKEN, which can be fed back into the mime package to read out the contents.



[call method [cmd PostData] [arg length]]
 Stream [arg length] bytes from the [arg chan] socket, but only of the request is a
 POST or PUSH. Returns an empty string otherwise.


[call method [cmd Session_Load]]
 Manage session data


[call method [cmd TransferComplete] ?[arg args]?]
 Intended to be invoked from [cmd {chan copy}] as a callback. This closes every channel
 fed to it on the command line, and then destroys the object.

 [example {
     ###
     # Output the body
     ###
     chan configure $sock -translation binary -blocking 0 -buffering full -buffersize 4096
     chan configure $chan -translation binary -blocking 0 -buffering full -buffersize 4096
     if {$length} {
       ###
       # Send any POST/PUT/etc content
       ###
       chan copy $sock $chan -size $SIZE -command [info coroutine]
       yield
     }
     catch {close $sock}
     chan flush $chan
 }]


[call method [cmd puts] [arg line]]
 Appends the value of [arg string] to the end of [arg reply_body], as well as a trailing newline
 character.


[call method [cmd RequestFind] [arg field]]


[call method [cmd request] [arg subcommand] ?[arg args]?]


[call method [cmd reply] [arg subcommand] ?[arg args]?]


[call method [cmd reset]]
 Clear the contents of the [arg reply_body] variable, and reset all headers in the [cmd reply]
 structure back to the defaults for this object.


[call method [cmd timeOutCheck]]
 Called from the [cmd http::server] object which spawned this reply. Checks to see
 if too much time has elapsed while waiting for data or generating a reply, and issues
 a timeout error to the request if it has, as well as destroy the object and close the
 [arg chan] socket.


[call method [cmd timestamp]]

 Return the current system time in the format: [example {%a, %d %b %Y %T %Z}]


[list_end]

 A class which shephards a request through the process of generating a
 reply.

 The socket associated with the reply is available at all times as the [arg chan]
 variable.

 The process of generating a reply begins with an [cmd httpd::server] generating a
 [cmd http::class] object, mixing in a set of behaviors and then invoking the reply
 object's [cmd dispatch] method.

 In normal operations the [cmd dispatch] method:

 [list_begin enumerated]

 [enum]
 Invokes the [cmd reset] method for the object to populate default headers.

 [enum]
 Invokes the [cmd HttpHeaders] method to stream the MIME headers out of the socket

 [enum]
 Invokes the [cmd {request parse}] method to convert the stream of MIME headers into a
 dict that can be read via the [cmd request] method.

 [enum]
 Stores the raw stream of MIME headers in the [arg rawrequest] variable of the object.

 [enum]
 Invokes the [cmd content] method for the object, generating an call to the [cmd error]
 method if an exception is raised.

 [enum]
 Invokes the [cmd output] method for the object
 [list_end]

 [para]

 [section {Reply Method Ensembles}]

 The [cmd http::reply] class and its derivatives maintain several variables as dictionaries
 internally. Access to these dictionaries is managed through a dedicated ensemble. The
 ensemble implements most of the same behaviors as the [cmd dict] command.

 Each ensemble implements the following methods above, beyond, or modifying standard dicts:

 [list_begin definitions]

 [call method [cmd ENSEMBLE::add] [arg field] [arg element]]

 Add [arg element] to a list stored in [arg field], but only if it is not already present om the list.

 [call method [cmd ENSEMBLE::dump]]

 Return the current contents of the data structure as a key/value list.

 [call method [cmd ENSEMBLE::get] [arg field]]

 Return the value of the field [arg field], or an empty string if it does not exist.

 [call method [cmd ENSEMBLE::reset]]

 Return a key/value list of the default contents for this data structure.

 [call method [cmd ENSEMBLE::remove] [arg field] [arg element]]

 Remove all instances of [arg element] from the list stored in [arg field].

 [call method [cmd ENSEMBLE::replace] [arg keyvaluelist]]

 Replace the internal dict with the contents of [arg keyvaluelist]

 [call method [cmd ENSEMBLE::reset]]

 Replace the internal dict with the default state.

 [call method [cmd ENSEMBLE::set] [arg field] [arg value]]

 Set the value of [arg field] to [arg value].

 [list_end]

 [section {Reply Method Ensemble: http_info}]

 Manages HTTP headers passed in by the server.

 Ensemble Methods:

 [list_begin definitions]

 [call method [cmd http_info::netstring]]

 Return the contents of this data structure as a netstring encoded block.

 [list_end]

 [section {Reply Method Ensemble: request}]

 Managed data from MIME headers of the request.

 [list_begin definitions]

 [call method  [cmd request::parse] [arg string]]

 Replace the contents of the data structure with information encoded in a MIME
 formatted block of text ([arg string]).

 [list_end]

 [section {Reply Method Ensemble: reply}]

 Manage the headers sent in the reply.


 [list_begin definitions]

 [call method [cmd reply::output]]

 Return the contents of this data structure as a MIME encoded block appropriate
 for an HTTP response.

 [list_end]

 [section {Reply Methods}]

 [list_begin definitions]
 [call method [cmd close]]

 Terminate the transaction, and close the socket.

 [call method [cmd HttpHeaders] [arg sock] [arg ?debug?]]

 Stream MIME headers from the socket [arg sock], stopping at an empty line. Returns
 the stream as a block of text.

 [call method [cmd dispatch] [arg newsock] [arg datastate]]

 Take over control of the socket [arg newsock], and store that as the [arg chan] variable
 for the object. This method runs through all of the steps of reading HTTP headers, generating
 content, and closing the connection. (See class writetup).

 [call method [cmd error] [arg code] [arg ?message?] [arg ?errorInfo?]]

 Generate an error message of the specified [arg code], and display the [arg message] as the
 reason for the exception. [arg errorInfo] is passed in from calls, but how or if it should be
 displayed is a prerogative of the developer.

 [call method [cmd content]]

 Generate the content for the reply. This method is intended to be replaced by the mixin.

 Developers have the option of streaming output to a buffer via the [cmd puts] method of the
 reply, or simply populating the [arg reply_body] variable of the object.
 The information returned by the [cmd content] method is not interpreted in any way.

 If an exception is thrown (via the [cmd error] command in Tcl, for example) the caller will
 auto-generate a 500 {Internal Error} message.

 A typical implementation of [cmd content] look like:

 [example {

 clay::define ::test::content.file {
 	superclass ::httpd::content.file
 	# Return a file
 	# Note: this is using the content.file mixin which looks for the reply_file variable
 	# and will auto-compute the Content-Type
 	method content {} {
 	  my reset
     set doc_root [my request get DOCUMENT_ROOT]
     my variable reply_file
     set reply_file [file join $doc_root index.html]
 	}
 }
 clay::define ::test::content.time {
   # return the current system time
 	method content {} {
 		my variable reply_body
     my reply set Content-Type text/plain
 		set reply_body [clock seconds]
 	}
 }
 clay::define ::test::content.echo {
 	method content {} {
 		my variable reply_body
     my reply set Content-Type [my request get CONTENT_TYPE]
 		set reply_body [my PostData [my request get CONTENT_LENGTH]]
 	}
 }
 clay::define ::test::content.form_handler {
 	method content {} {
 	  set form [my FormData]
 	  my reply set Content-Type {text/html; charset=UTF-8}
     my puts [my html_header {My Dynamic Page}]
     my puts "<BODY>"
     my puts "You Sent<p>"
     my puts "<TABLE>"
     foreach {f v} $form {
       my puts "<TR><TH>$f</TH><TD><verbatim>$v</verbatim></TD>"
     }
     my puts "</TABLE><p>"
     my puts "Send some info:<p>"
     my puts "<FORM action=/[my request get REQUEST_PATH] method POST>"
     my puts "<TABLE>"
     foreach field {name rank serial_number} {
       set line "<TR><TH>$field</TH><TD><input name=\"$field\" "
       if {[dict exists $form $field]} {
         append line " value=\"[dict get $form $field]\"""
       }
       append line " /></TD></TR>"
       my puts $line
     }
     my puts "</TABLE>"
     my puts [my html footer]
 	}
 }

 }]
 [list_end]



[section {Class  ::httpd::server}]
[list_begin definitions]

[call method [cmd constructor] [arg args] ?[arg port] [emph "auto"]? ?[arg myaddr] [emph "127.0.0.1"]? ?[arg string] [emph "auto"]? ?[arg name] [emph "auto"]? ?[arg doc_root] [emph ""]? ?[arg reverse_dns] [emph "0"]? ?[arg configuration_file] [emph ""]? ?[arg protocol] [emph "HTTP/1.1"]?]


[call method [cmd destructor] ?[arg dictargs]?]


[call method [cmd connect] [arg sock] [arg ip] [arg port]]

 Reply to an open socket. This method builds a coroutine to manage the remainder
 of the connection. The coroutine's operations are driven by the [cmd Connect] method.



[call method [cmd ServerHeaders] [arg ip] [arg http_request] [arg mimetxt]]


[call method [cmd Connect] [arg uuid] [arg sock] [arg ip]]

 This method reads HTTP headers, and then consults the [cmd dispatch] method to
 determine if the request is valid, and/or what kind of reply to generate. Under
 normal cases, an object of class [cmd ::http::reply] is created, and that class's
 [cmd dispatch] method.
 This action passes control of the socket to
 the reply object. The reply object manages the rest of the transaction, including
 closing the socket.



[call method [cmd counter] [arg which]]
 Increment an internal counter.


[call method [cmd CheckTimeout]]

 Check open connections for a time out event.



[call method [cmd debug] ?[arg args]?]


[call method [cmd dispatch] [arg data]]

 Given a key/value list of information, return a data structure describing how
 the server should reply.



[call method [cmd Dispatch_Default] [arg reply]]

 Method dispatch method of last resort before returning a 404 NOT FOUND error.
 The default behavior is to look for a file in [emph DOCUMENT_ROOT] which
 matches the query.



[call method [cmd Dispatch_Local] [arg data]]

 Method dispatch method invoked prior to invoking methods implemented by plugins.
 If this method returns a non-empty dictionary, that structure will be passed to
 the reply. The default is an empty implementation.



[call method [cmd Headers_Local] [arg varname]]

 Introspect and possibly modify a data structure destined for a reply. This
 method is invoked before invoking Header methods implemented by plugins.
 The default implementation is empty.



[call method [cmd Headers_Process] [arg varname]]

 Introspect and possibly modify a data structure destined for a reply. This
 method is built dynamically by the [cmd plugin] method.



[call method [cmd HostName] [arg ipaddr]]

 Convert an ip address to a host name. If the server/ reverse_dns flag
 is false, this method simply returns the IP address back.
 Internally, this method uses the [emph dns] module from tcllib.



[call method [cmd log] ?[arg args]?]

 Log an event. The input for args is free form. This method is intended
 to be replaced by the user, and is a noop for a stock http::server object.



[call method [cmd plugin] [arg slot] ?[arg class] [emph ""]?]

 Incorporate behaviors from a plugin.
 This method dynamically rebuilds the [cmd Dispatch] and [cmd Headers]
 method. For every plugin, the server looks for the following entries in
 [emph "clay plugin/"]:
 [para]
 [emph load] - A script to invoke in the server's namespace during the [cmd plugin] method invokation.
 [para]
 [emph dispatch] - A script to stitch into the server's [cmd Dispatch] method.
 [para]
 [emph headers] - A script to stitch into the server's [cmd Headers] method.
 [para]
 [emph thread] - A script to stitch into the server's [cmd Thread_start] method.



[call method [cmd port_listening]]
 Return the actual port that httpd is listening on.


[call method [cmd PrefixNormalize] [arg prefix]]
 For the stock version, trim trailing /'s and *'s from a prefix. This
 method can be replaced by the end user to perform any other transformations
 needed for the application.


[call method [cmd source] [arg filename]]


[call method [cmd start]]
 Open the socket listener.


[call method [cmd stop]]
 Shut off the socket listener, and destroy any pending replies.


[call method [cmd SubObject::db]]


[call method [cmd SubObject::default]]


[call method [cmd template] [arg page]]
 Return a template for the string [arg page]


[call method [cmd TemplateSearch] [arg page]]
 Perform a search for the template that best matches [arg page]. This
 can include local file searches, in-memory structures, or even
 database lookups. The stock implementation simply looks for files
 with a .tml or .html extension in the [opt doc_root] directory.


[call method [cmd Thread_start]]

 Built by the [cmd plugin] method. Called by the [cmd start] method. Intended
 to allow plugins to spawn worker threads.



[call method [cmd Uuid_Generate]]

 Generate a GUUID. Used to ensure every request has a unique ID.
 The default implementation is:
 [example {
   return [::uuid::uuid generate]
 }]



[call method [cmd Validate_Connection] [arg sock] [arg ip]]

 Given a socket and an ip address, return true if this connection should
 be terminated, or false if it should be allowed to continue. The stock
 implementation always returns 0. This is intended for applications to
 be able to implement black lists and/or provide security based on IP
 address.


[list_end]

 An httpd server with a template engine and a shim to insert URL domains.

 This class is the root object of the webserver. It is responsible
 for opening the socket and providing the initial connection negotiation.



[section {Class  ::httpd::server::dispatch}]

 Provide a backward compadible alias



[section {Class  ::httpd::content.redirect}]
[list_begin definitions]

[call method [cmd reset]]


[call method [cmd content]]

[list_end]


[section {Class  ::httpd::content.cache}]
[list_begin definitions]

[call method [cmd Dispatch]]

[list_end]


[section {Class  ::httpd::content.template}]
[list_begin definitions]

[call method [cmd content]]

[list_end]


[section {Class  ::httpd::content.file}]
[list_begin definitions]

[call method [cmd FileName]]


[call method [cmd DirectoryListing] [arg local_file]]


[call method [cmd content]]


[call method [cmd Dispatch]]

[list_end]

 Class to deliver Static content
 When utilized, this class is fed a local filename
 by the dispatcher



[section {Class  ::httpd::content.exec}]
[list_begin definitions]

[call method [cmd CgiExec] [arg execname] [arg script] [arg arglist]]


[call method [cmd Cgi_Executable] [arg script]]

[list_end]


[section {Class  ::httpd::content.proxy}]
[list_begin definitions]

[call method [cmd proxy_channel]]


[call method [cmd proxy_path]]


[call method [cmd ProxyRequest] [arg chana] [arg chanb]]


[call method [cmd ProxyReply] [arg chana] [arg chanb] ?[arg args]?]


[call method [cmd Dispatch]]

[list_end]

 Return data from an proxy process



[section {Class  ::httpd::content.cgi}]
[list_begin definitions]

[call method [cmd FileName]]


[call method [cmd proxy_channel]]


[call method [cmd ProxyRequest] [arg chana] [arg chanb]]


[call method [cmd ProxyReply] [arg chana] [arg chanb] ?[arg args]?]


[call method [cmd DirectoryListing] [arg local_file]]

 For most CGI applications a directory list is vorboten


[list_end]


[section {Class  ::httpd::protocol.scgi}]
[list_begin definitions]

[call method [cmd EncodeStatus] [arg status]]

[list_end]

 Return data from an SCGI process



[section {Class  ::httpd::content.scgi}]
[list_begin definitions]

[call method [cmd scgi_info]]


[call method [cmd proxy_channel]]


[call method [cmd ProxyRequest] [arg chana] [arg chanb]]


[call method [cmd ProxyReply] [arg chana] [arg chanb] ?[arg args]?]

[list_end]


[section {Class  ::httpd::server.scgi}]
[list_begin definitions]

[call method [cmd debug] ?[arg args]?]


[call method [cmd Connect] [arg uuid] [arg sock] [arg ip]]

[list_end]

 Act as an  SCGI Server



[section {Class  ::httpd::content.websocket}]

 Upgrade a connection to a websocket



[section {Class  ::httpd::plugin}]

 httpd plugin template



[section {Class  ::httpd::plugin.dict_dispatch}]
[list_begin definitions]

[call method [cmd Dispatch_Dict] [arg data]]

 Implementation of the dispatcher



[call method [cmd uri::add] [arg vhosts] [arg patterns] [arg info]]




[call method [cmd uri::direct] [arg vhosts] [arg patterns] [arg info] [arg body]]

[list_end]

 A rudimentary plugin that dispatches URLs from a dict
 data structure



[section {Class  ::httpd::reply.memchan}]
[list_begin definitions]

[call method [cmd output]]


[call method [cmd DoOutput]]


[call method [cmd close]]

[list_end]


[section {Class  ::httpd::plugin.local_memchan}]
[list_begin definitions]

[call method [cmd local_memchan] [arg command] ?[arg args]?]


[call method [cmd Connect_Local] [arg uuid] [arg sock] ?[arg args]?]

 A modified connection method that passes simple GET request to an object
 and pulls data directly from the reply_body data variable in the object

 Needed because memchan is bidirectional, and we can't seem to communicate that
 the server is one side of the link and the reply is another


[list_end]


[section AUTHORS]
Sean Woods

[vset CATEGORY network]
[include ../doctools2base/include/feedback.inc]

[manpage_end]

