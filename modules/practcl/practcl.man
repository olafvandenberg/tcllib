[comment {-*- practcl -*-}]
[vset VERSION 0.12]
[manpage_begin practcl n [vset VERSION]]
[keywords practcl]
[copyright {2016-2018 Sean Woods <yoda@etoyoc.com>}]
[moddesc {The The Proper Rational API for C to Tool Command Language Module}]
[titledesc {The Practcl Module}]
[category {TclOO}]
[require TclOO 1.0]
[require practcl [vset VERSION]]
[description]
The Practcl module is a tool for integrating large modules for C API
Tcl code that requires custom Tcl types and TclOO objects.

[section {Commands}]
[list_begin definitions]

[call proc [cmd practcl::debug] ?[arg args]?]
 Practcl
 An object oriented templating system for stamping out Tcl API calls to C


 Seek out Tcllib if it's available


 Build utility functions


 A command to do nothing. A handy way of
 negating an instruction without
 having to comment it completely out.
 It's also a handy attachment point for
 an object to be named later



[call proc [cmd practcl::doexec] ?[arg args]?]

 Drop in a static copy of Tcl



[call proc [cmd practcl::doexec_in] [arg path] ?[arg args]?]


[call proc [cmd practcl::dotclexec] ?[arg args]?]


[call proc [cmd practcl::domake] [arg path] ?[arg args]?]


[call proc [cmd practcl::domake.tcl] [arg path] ?[arg args]?]


[call proc [cmd practcl::fossil] [arg path] ?[arg args]?]


[call proc [cmd practcl::fossil_status] [arg dir]]


[call proc [cmd practcl::os]]


[call proc [cmd practcl::local_os]]


[call proc [cmd practcl::config.tcl] [arg path]]

 Detect local platform



[call proc [cmd practcl::read_configuration] [arg path]]


[call proc [cmd practcl::tcllib_require] [arg pkg] ?[arg args]?]

 Convert an MSYS path to a windows native path

 Try to load  a package, and failing that
 retrieve tcllib


[call proc [cmd practcl::platform::tcl_core_options] [arg os]]


[call proc [cmd practcl::platform::tk_core_options] [arg os]]


[call proc [cmd practcl::read_rc_file] [arg filename] ?[arg localdat] [emph ""]?]

 Read a stylized key/value list stored in a file



[call proc [cmd practcl::read_sh_subst] [arg line] [arg info]]

 topic: e71f3f61c348d56292011eec83e95f0aacc1c618
 description: Converts a XXX.sh file into a series of Tcl variables



[call proc [cmd practcl::read_sh_file] [arg filename] ?[arg localdat] [emph ""]?]

 topic: 03567140cca33c814664c7439570f669b9ab88e6



[call proc [cmd practcl::read_Config.sh] [arg filename]]

 A simpler form of read_sh_file tailored
 to pulling data from (tcl|tk)Config.sh



[call proc [cmd practcl::read_Makefile] [arg filename]]

 A simpler form of read_sh_file tailored
 to pulling data from a Makefile



[call proc [cmd practcl::cputs] [arg varname] ?[arg args]?]
 Append arguments to a buffer
 The command works like puts in that each call will also insert
 a line feed. Unlike puts, blank links in the interstitial are
 suppressed


[call proc [cmd practcl::tcl_to_c] [arg body]]


[call proc [cmd practcl::_tagblock] [arg text] ?[arg style] [emph "tcl"]? ?[arg note] [emph ""]?]


[call proc [cmd practcl::de_shell] [arg data]]


[call proc [cmd practcl::cat] [arg fname]]

 Bits stolen from fileutil



[call proc [cmd practcl::grep] [arg pattern] ?[arg files] [emph ""]?]


[call proc [cmd practcl::file_lexnormalize] [arg sp]]


[call proc [cmd practcl::file_relative] [arg base] [arg dst]]


[call proc [cmd practcl::log] [arg fname] [arg comment]]


[call proc [cmd practcl::_isdirectory] [arg name]]

 Installer tools



[call proc [cmd practcl::_pkgindex_directory] [arg path]]

 Return true if the pkgindex file contains
 any statement other than "package ifneeded"
 and/or if any package ifneeded loads a DLL



[call proc [cmd practcl::_pkgindex_path_subdir] [arg path]]


[call proc [cmd practcl::pkgindex_path] ?[arg args]?]

 Index all paths given as though they will end up in the same
 virtual file system



[call proc [cmd practcl::installDir] [arg d1] [arg d2]]


[call proc [cmd practcl::copyDir] [arg d1] [arg d2] ?[arg toplevel] [emph "1"]?]


[call proc [cmd practcl::trigger] ?[arg args]?]

 Backward compatible Make facilities
 These were used early in development and are consdiered deprecated



[call proc [cmd practcl::depends] ?[arg args]?]


[call proc [cmd practcl::target] [arg name] [arg info] ?[arg action] [emph ""]?]

[list_end]

[section {Class  ::practcl::metaclass}]
[list_begin definitions]

[call method [cmd _MorphPatterns]]


[call method [cmd define] [arg submethod] ?[arg args]?]


[call method [cmd graft] ?[arg args]?]


[call method [cmd initialize]]


[call method [cmd link] [arg command] ?[arg args]?]


[call method [cmd morph] [arg classname]]


[call method [cmd mixin] [arg slot] [arg classname]]


[call method [cmd organ] ?[arg args]?]


[call method [cmd script] [arg script]]


[call method [cmd select]]


[call method [cmd source] [arg filename]]

[list_end]


[section {Class  ::practcl::toolset}]
[list_begin definitions]

[call method [cmd config.sh]]

 find or fake a key/value list describing this project



[call method [cmd BuildDir] [arg PWD]]


[call method [cmd MakeDir] [arg srcdir]]


[call method [cmd read_configuration]]


[call method [cmd build-cflags] [arg PROJECT] [arg DEFS] [arg namevar] [arg versionvar] [arg defsvar]]
 method DEFS
 This method populates 4 variables:
 name - The name of the package
 version - The version of the package
 defs - C flags passed to the compiler
 includedir - A list of paths to feed to the compiler for finding headers



[call method [cmd critcl] ?[arg args]?]


[call method [cmd make-autodetect]]

[list_end]

 Ancestor-less class intended to be a mixin
 which defines a family of build related behaviors
 that are modified when targetting either gcc or msvc



[section {Class  ::practcl::toolset.gcc}]
[list_begin definitions]

[call method [cmd Autoconf]]


[call method [cmd BuildDir] [arg PWD]]


[call method [cmd ConfigureOpts]]


[call method [cmd MakeDir] [arg srcdir]]
 Detect what directory contains the Makefile template


[call method [cmd make-autodetect]]


[call method [cmd make-clean]]


[call method [cmd make-compile]]


[call method [cmd make-install] [arg DEST]]


[call method [cmd build-compile-sources] [arg PROJECT] [arg COMPILE] [arg CPPCOMPILE] [arg INCLUDES]]


[call method [cmd build-Makefile] [arg path] [arg PROJECT]]


[call method [cmd build-library] [arg outfile] [arg PROJECT]]

 Produce a static or dynamic library



[call method [cmd build-tclsh] [arg outfile] [arg PROJECT]]

 Produce a static executable


[list_end]


[section {Class  ::practcl::toolset.msvc}]
[list_begin definitions]

[call method [cmd BuildDir] [arg PWD]]
 MSVC always builds in the source directory


[call method [cmd make-autodetect]]
 Do nothing


[call method [cmd make-clean]]


[call method [cmd make-compile]]


[call method [cmd make-install] [arg DEST]]


[call method [cmd MakeDir] [arg srcdir]]
 Detect what directory contains the Makefile template


[call method [cmd NmakeOpts]]

[list_end]


[section {Class  ::practcl::make_obj}]
[list_begin definitions]

[call method [cmd constructor] [arg module_object] [arg name] [arg info] ?[arg action_body] [emph ""]?]


[call method [cmd do]]


[call method [cmd check]]


[call method [cmd output]]


[call method [cmd reset]]


[call method [cmd triggers]]

[list_end]


[section {Class  ::practcl::object}]
[list_begin definitions]

[call method [cmd constructor] [arg parent] ?[arg args]?]


[call method [cmd child] [arg method]]


[call method [cmd go]]

[list_end]


[section {Class  ::practcl::dynamic}]
[list_begin definitions]

[call method [cmd cstructure] [arg name] [arg definition] ?[arg argdat] [emph ""]?]

 Parser functions



[call method [cmd include] [arg header]]


[call method [cmd include_dir] ?[arg args]?]


[call method [cmd include_directory] ?[arg args]?]


[call method [cmd c_header] [arg body]]


[call method [cmd c_code] [arg body]]


[call method [cmd c_function] [arg header] [arg body] ?[arg info] [emph ""]?]


[call method [cmd c_tcloomethod] [arg name] [arg body] ?[arg arginfo] [emph ""]?]


[call method [cmd cmethod] [arg name] [arg body] ?[arg arginfo] [emph ""]?]
 Alias to classic name


[call method [cmd c_tclproc_nspace] [arg nspace]]


[call method [cmd c_tclcmd] [arg name] [arg body] ?[arg arginfo] [emph ""]?]


[call method [cmd c_tclproc_raw] [arg name] [arg body] ?[arg arginfo] [emph ""]?]
 Alias to classic name


[call method [cmd tcltype] [arg name] [arg argdat]]


[call method [cmd project-compile-products]]

 Module interactions



[call method [cmd implement] [arg path]]


[call method [cmd initialize]]

 Practcl internals



[call method [cmd linktype]]


[call method [cmd generate-cfile-constant]]


[call method [cmd generate-cfile-header]]


[call method [cmd generate-cfile-tclapi]]

 Generate code that provides implements Tcl API
 calls



[call method [cmd generate-loader-module]]

 Generate code that runs when the package/module is
 initialized into the interpreter



[call method [cmd Collate_Source] [arg CWD]]


[call method [cmd select]]
 Once an object marks itself as some
 flavor of dynamic, stop trying to morph
 it into something else

[list_end]

 Dynamic blocks do not generate their own .c files,
 instead the contribute to the amalgamation
 of the main library file



[section {Class  ::practcl::product}]
[list_begin definitions]

[call method [cmd code] [arg section] [arg body]]


[call method [cmd Collate_Source] [arg CWD]]


[call method [cmd project-compile-products]]


[call method [cmd generate-debug] ?[arg spaces] [emph ""]?]


[call method [cmd generate-cfile-constant]]


[call method [cmd generate-cfile-public-structure]]

 Populate const static data structures



[call method [cmd generate-cfile-header]]


[call method [cmd generate-cfile-global]]


[call method [cmd generate-cfile-private-typedef]]


[call method [cmd generate-cfile-private-structure]]


[call method [cmd generate-cfile-functions]]

 Generate code that provides subroutines called by
 Tcl API methods



[call method [cmd generate-cfile-tclapi]]

 Generate code that provides implements Tcl API
 calls



[call method [cmd generate-hfile-public-define]]


[call method [cmd generate-hfile-public-macro]]


[call method [cmd generate-hfile-public-typedef]]


[call method [cmd generate-hfile-public-structure]]


[call method [cmd generate-hfile-public-headers]]


[call method [cmd generate-hfile-public-function]]


[call method [cmd generate-hfile-public-includes]]


[call method [cmd generate-hfile-public-verbatim]]


[call method [cmd generate-loader-external]]


[call method [cmd generate-loader-module]]


[call method [cmd generate-stub-function]]


[call method [cmd IncludeAdd] [arg headervar] ?[arg args]?]


[call method [cmd generate-tcl-loader]]


[call method [cmd generate-tcl-pre]]

 This methods generates any Tcl script file
 which is required to pre-initialize the C library



[call method [cmd generate-tcl-post]]


[call method [cmd linktype]]


[call method [cmd Ofile] [arg filename]]


[call method [cmd project-static-packages]]

 Methods called by the master project



[call method [cmd toolset-include-directory]]

 Methods called by the toolset



[call method [cmd target] [arg method] ?[arg args]?]

[list_end]


[section {Class  ::practcl::product.cheader}]
[list_begin definitions]

[call method [cmd project-compile-products]]


[call method [cmd generate-loader-module]]

[list_end]

 Flesh out several trivial varieties of product



[section {Class  ::practcl::product.csource}]
[list_begin definitions]

[call method [cmd project-compile-products]]

[list_end]


[section {Class  ::practcl::product.clibrary}]
[list_begin definitions]

[call method [cmd linker-products] [arg configdict]]

[list_end]


[section {Class  ::practcl::product.dynamic}]
[list_begin definitions]

[call method [cmd initialize]]

[list_end]


[section {Class  ::practcl::product.critcl}]


[section {Class  ::practcl::module}]
[list_begin definitions]

[call method [cmd _MorphPatterns]]


[call method [cmd add] ?[arg args]?]


[call method [cmd install-headers] ?[arg args]?]


[call method [cmd make] [arg command] ?[arg args]?]

 Target handling



[call method [cmd child] [arg which]]


[call method [cmd generate-c]]

 This methods generates the contents of an amalgamated .c file
 which implements the loader for a batch of tools



[call method [cmd generate-h]]

 This methods generates the contents of an amalgamated .h file
 which describes the public API of this module



[call method [cmd generate-loader]]


[call method [cmd initialize]]


[call method [cmd implement] [arg path]]


[call method [cmd linktype]]

[list_end]

 In the end, all C code must be loaded into a module
 This will either be a dynamically loaded library implementing
 a tcl extension, or a compiled in segment of a custom shell/app



[section {Class  ::practcl::project}]
[list_begin definitions]

[call method [cmd _MorphPatterns]]


[call method [cmd constructor] ?[arg args]?]


[call method [cmd add_object] [arg object]]


[call method [cmd add_project] [arg pkg] [arg info] ?[arg oodefine] [emph ""]?]


[call method [cmd add_tool] [arg pkg] [arg info] ?[arg oodefine] [emph ""]?]


[call method [cmd build-tclcore]]


[call method [cmd child] [arg which]]


[call method [cmd linktype]]


[call method [cmd project] [arg pkg] ?[arg args]?]
 Exercise the methods of a sub-object


[call method [cmd tclcore]]


[call method [cmd tkcore]]


[call method [cmd tool] [arg pkg] ?[arg args]?]

[list_end]


[section {Class  ::practcl::library}]
[list_begin definitions]

[call method [cmd clean] [arg PATH]]


[call method [cmd project-compile-products]]


[call method [cmd go]]


[call method [cmd generate-decls] [arg pkgname] [arg path]]


[call method [cmd implement] [arg path]]


[call method [cmd generate-make] [arg path]]
 Backward compadible call


[call method [cmd linktype]]


[call method [cmd package-ifneeded] ?[arg args]?]
 Create a "package ifneeded"
 Args are a list of aliases for which this package will answer to


[call method [cmd shared_library] ?[arg filename] [emph ""]?]


[call method [cmd static_library] ?[arg filename] [emph ""]?]

[list_end]


[section {Class  ::practcl::tclkit}]
[list_begin definitions]

[call method [cmd build-tclkit_main] [arg PROJECT] [arg PKG_OBJS]]


[call method [cmd Collate_Source] [arg CWD]]


[call method [cmd wrap] [arg PWD] [arg exename] [arg vfspath] ?[arg args]?]
 Wrap an executable


[list_end]


[section {Class  ::practcl::distribution}]
[list_begin definitions]

[call method [cmd scm_info]]


[call method [cmd DistroMixIn]]


[call method [cmd Sandbox]]


[call method [cmd SrcDir]]


[call method [cmd ScmTag]]


[call method [cmd ScmClone]]


[call method [cmd ScmUnpack]]


[call method [cmd ScmUpdate]]


[call method [cmd Unpack]]

[list_end]

 Standalone class to manage code distribution
 This class is intended to be mixed into another class
 (Thus the lack of ancestors)



[section {Class  ::practcl::distribution.snapshot}]
[list_begin definitions]

[call method [cmd ScmUnpack]]

[list_end]


[section {Class  ::practcl::distribution.fossil}]
[list_begin definitions]

[call method [cmd scm_info]]


[call method [cmd ScmClone]]
 Clone the source


[call method [cmd ScmTag]]


[call method [cmd ScmUnpack]]


[call method [cmd ScmUpdate]]

[list_end]


[section {Class  ::practcl::distribution.git}]
[list_begin definitions]

[call method [cmd ScmTag]]


[call method [cmd ScmUnpack]]


[call method [cmd ScmUpdate]]

[list_end]


[section {Class  ::practcl::subproject}]
[list_begin definitions]

[call method [cmd _MorphPatterns]]


[call method [cmd BuildDir] [arg PWD]]


[call method [cmd child] [arg which]]


[call method [cmd compile]]


[call method [cmd go]]


[call method [cmd install] ?[arg args]?]
 Install project into the local build system


[call method [cmd linktype]]


[call method [cmd linker-products] [arg configdict]]


[call method [cmd linker-external] [arg configdict]]


[call method [cmd linker-extra] [arg configdict]]


[call method [cmd env-bootstrap]]

 Methods for packages/tools that can be downloaded
 possibly built and used internally by this Practcl
 process


 Load the facility into the interpreter



[call method [cmd env-exec]]

 Return a file path that exec can call



[call method [cmd env-install]]

 Install the tool into the local environment



[call method [cmd env-load]]

 Do whatever is necessary to get the tool
 into the local environment



[call method [cmd env-present]]

 Check if tool is available for load/already loaded



[call method [cmd sources]]


[call method [cmd update]]


[call method [cmd unpack]]

[list_end]


[section {Class  ::practcl::subproject.source}]
[list_begin definitions]

[call method [cmd env-bootstrap]]


[call method [cmd env-present]]


[call method [cmd linktype]]

[list_end]

 Trivial implementations


 A project which the kit compiles and integrates
 the source for itself



[section {Class  ::practcl::subproject.teapot}]
[list_begin definitions]

[call method [cmd env-bootstrap]]


[call method [cmd env-install]]


[call method [cmd env-present]]


[call method [cmd install] [arg DEST]]

[list_end]
 a copy from the teapot


[section {Class  ::practcl::subproject.kettle}]
[list_begin definitions]

[call method [cmd kettle] [arg path] ?[arg args]?]


[call method [cmd install] [arg DEST]]

[list_end]


[section {Class  ::practcl::subproject.critcl}]
[list_begin definitions]

[call method [cmd install] [arg DEST]]

[list_end]


[section {Class  ::practcl::subproject.sak}]
[list_begin definitions]

[call method [cmd env-bootstrap]]


[call method [cmd env-install]]


[call method [cmd env-present]]


[call method [cmd install] [arg DEST]]


[call method [cmd install-module] [arg DEST] ?[arg args]?]

[list_end]


[section {Class  ::practcl::subproject.binary}]
[list_begin definitions]

[call method [cmd clean]]


[call method [cmd env-install]]


[call method [cmd project-compile-products]]


[call method [cmd ComputeInstall]]


[call method [cmd go]]


[call method [cmd linker-products] [arg configdict]]


[call method [cmd project-static-packages]]


[call method [cmd BuildDir] [arg PWD]]


[call method [cmd compile]]


[call method [cmd Configure]]


[call method [cmd install] [arg DEST]]

[list_end]

 A binary package



[section {Class  ::practcl::subproject.tea}]


[section {Class  ::practcl::subproject.library}]
[list_begin definitions]

[call method [cmd install] [arg DEST]]

[list_end]


[section {Class  ::practcl::subproject.external}]
[list_begin definitions]

[call method [cmd install] [arg DEST]]

[list_end]
 An external library


[section {Class  ::practcl::subproject.core}]
[list_begin definitions]

[call method [cmd env-bootstrap]]


[call method [cmd env-present]]


[call method [cmd env-install]]


[call method [cmd go]]


[call method [cmd linktype]]

[list_end]


[vset CATEGORY practcl]
[include ../doctools2base/include/feedback.inc]

[manpage_end]

