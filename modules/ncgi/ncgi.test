# -*- tcl -*-
# Tests for the cgi module.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 by Ajuba Solutions
#
# RCS: @(#) $Id: ncgi.test,v 1.28 2012/05/03 17:56:07 andreas_kupries Exp $

# -------------------------------------------------------------------------

source [file join \
	[file dirname [file dirname [file join [pwd] [info script]]]] \
	devtools testutilities.tcl]

testsNeedTcl     8.4
testsNeedTcltest 2

testing {
    useLocal ncgi.tcl ncgi
}

proc main {} {
	global env
	global auto_path

	set     sub_ap $auto_path
	lappend sub_ap $::tcltest::testsDirectory
	set ncgiFile   [localPath ncgi.tcl]
	set futlFile   [tcllibPath fileutil/fileutil.tcl]
	set cmdlFile   [tcllibPath cmdline/cmdline.tcl]


	test ncgi-1.1 {[ncgi reset]} {
		ncgi::reset
		list [info exist ncgi::query] [info exist ncgi::contenttype]
	} {0 0}


	test ncgi-1.2 {[ncgi reset]} {
		ncgi reset querystring query=reset
		list $ncgi::querystring $ncgi::contenttype
	} {query=reset {}}


	test ncgi-1.3 {[ncgi reset]} {
		ncgi reset querystring query=reset contenttype text/plain
		list $ncgi::querystring $ncgi::contenttype
	} {query=reset text/plain}


	test ncgi-2.1 {[ncgi query] fake query data} {
		ncgi reset querystring fake=query
		ncgi query parse
		list $ncgi::querystring $ncgi::query
	} {fake=query {fake query}}


	test ncgi-2.2 {[ncgi query] GET} {
		ncgi reset
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) name=value
		ncgi query parse 
		list $ncgi::querystring $ncgi::query
	} {name=value {name value}}


	test ncgi-2.3 {[ncgi query] HEAD} {
		ncgi reset
		set env(REQUEST_METHOD) HEAD
		catch {unset env(QUERY_STRING)}
		ncgi query parse
		set ncgi::query
	} {} 


	test ncgi-2.4 {[ncgi query] POST} {
		ncgi reset
		catch {unset env(QUERY_STRING)}
		set env(REQUEST_METHOD) POST
		set env(CONTENT_LENGTH) 10
		makeFile [format {
		set auto_path {%s}
		source {%s}
		source {%s}
		source {%s}
		ncgi body
		puts $::ncgi::body
		} $sub_ap $cmdlFile $futlFile $ncgiFile] test1 ; # {}
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		puts  $f "name=value"
		flush $f
		gets  $f line
		close $f
		removeFile test1
		set line
	} name=value


	test ncgi-2.5 {ncgi::test} {
		ncgi reset
		set env(CONTENT_TYPE) text/html
		ncgi type
	} text/html


	test ncgi-2.6 {ncgi::test} {
		ncgi reset querystring foo=bar contenttype text/plain
		set env(CONTENT_TYPE) text/html
		ncgi type
	} text/plain


	test ncgi-3.1 {ncgi::decode} {
		ncgi decode abcdef0123
	} abcdef0123


	test ncgi-3.2 {ncgi::decode} {
		ncgi decode {[abc]def$0123\x}
	} {[abc]def$0123\x}


	test ncgi-3.3 {ncgi::decode} {
		ncgi decode {[a%25c]def$01%7E3\x%3D}
	} {[a%c]def$01~3\x=}


	test ncgi-3.4 {ncgi::decode} {
		ncgi decode {hello+world}
	} {hello world}


	test ncgi-3.5 {ncgi::decode} {
		ncgi decode {aik%C5%ABloa}
	} "aik\u016Bloa" ; # u+macron


	test ncgi-3.6 {ncgi::decode} {
		ncgi decode {paran%C3%A1}
	} "paran\u00E1" ; # a+acute


	test ncgi-3.7 {ncgi::decode, bug 3601995} {
		ncgi decode {%C4%85}
	} "\u0105" ; # a+ogonek


	test ncgi-3.8 {ncgi::decode, bug 3601995} {
		ncgi decode {%E2%80%A0}
	} "\u2020" ; # dagger


	test ncgi-3.9 {ncgi::decode, bug 3601995} {
		ncgi decode {%E2%A0%90}
	} "\u2810" ; # a braille pattern


	test ncgi-3.10 {ncgi::decode, bug 3601995} {
		ncgi decode {%E2%B1}
	} "%E2%B1" ; # missing byte trailing %A0, do not accept/decode, pass through.


	test ncgi-4.1 {ncgi::encode} {
		ncgi encode abcdef0123
	} abcdef0123


	test ncgi-4.2 {ncgi::encode} {
		ncgi encode "\[abc\]def\$0123\\x"
	} {%5Babc%5Ddef%240123%5Cx}


	test ncgi-4.3 {ncgi::encode} {
		ncgi encode {hello world}
	} {hello+world}


	test ncgi-4.4 {ncgi::encode} {
		ncgi encode "hello\nworld\r\tbar"
	} {hello%0D%0Aworld%0D%09bar}


	test ncgi-5.1 {ncgi::query parse} {
		ncgi reset querystring name=hello+world&name2=%7ewelch
		ncgi query parse
	} {name {hello world} name2 ~welch}


	test ncgi-5.2 {ncgi::merge} {
		ncgi reset querystring name=&name2 contenttype application/x-www-urlencoded
		ncgi merge
	} {name {} name2 {}}


	test ncgi-5.3 {ncgi::merge} {
		ncgi reset querystring name=&name2 contenttype application/x-www-form-urlencoded
		ncgi merge
	} {name {} name2 {}}


	test ncgi-5.4.1 {ncgi::merge} {
		ncgi reset querystring name=&name2 contenttype application/xyzzy
		set code [catch ncgi::merge err]
		list $code $err
	} {0 {name {} name2 {}}}

	test ncgi-5.4.2 {ncgi::merge} {
		ncgi reset body name=&name2 contenttype application/xyzzy
		set code [catch ncgi::merge err]
		list $code $err
	} {0 {name {} name2 {}}}

	test ncgi-5.4.3 {ncgi::merge} {
		ncgi reset body name=&name2 contenttype application/xyzzy
		set code [catch {ncgi::form get} err]
		list $code $err
	} {1 {Unknown Content-Type: application/xyzzy}}


	# multipart tests at the end because I'm too lazy to renumber the tests

	test ncgi-6.1 {ncgi::parse, anonymous values, redundant keys} {
		ncgi reset querystring name=&name2
		ncgi query parse
	} {name {} name2 {}}


	test ncgi-7.1 {ncgi::get} {
		ncgi reset querystring name=value&name2=value2
		catch {unset env(REQUEST_METHOD)}
		ncgi get
	} {name value name2 value2}


	test ncgi-7.2 {ncgi::get} {
		ncgi reset querystring nameList=value1+stuff&nameList=value2+more
		ncgi all nameList
	} {{value1 stuff} {value2 more}}


	test ncgi-7.3 {ncgi::get} {
		ncgi reset querystring name=value&name=value2
		catch {ncgi get} err
		set err
	} {name value name value2}


	test ncgi-8.1.1 {ncgi::value} {
		ncgi reset querystring nameList=val+ue&nameList=value2
		ncgi get nameList
	} value2


	test ncgi-8.1.2 {ncgi::value} {
		ncgi reset querystring nameList=val+ue&nameList=value2
		ncgi all nameList
	} {{val ue} value2}


	test ncgi-8.2.1 {ncgi::value} {
		ncgi reset querystring name=val+ue&name=value2
		ncgi get name
	} value2 


	test ncgi-8.2.2 {ncgi::value} {
		ncgi reset querystring name=val+ue&name=value2
		ncgi all name
	} {{val ue} value2}


	test ncgi-8.3 {ncgi::get default} {
		ncgi reset querystring name=val+ue&name=value2
		ncgi get noname
	} {}


	test ncgi-9.1 {ncgi::valueList} {
		ncgi reset querystring name=val+ue&name=value2
		ncgi all name
	} {{val ue} value2}


	test ncgi-9.2 {ncgi::valueList} {
		ncgi reset querystring name=val+ue&name=value2
		ncgi all noname
	} {}


	set URL http://www.tcltk.com/index.html
	test ncgi-11.1 {ncgi::redirect} {
		set env(REQUEST_URI) http://www.scriptics.com/cgi-bin/test.cgi
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) {}
		set env(SERVER_NAME) www.scriptics.com
		set env(SERVER_PORT) 80
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::redirect %s
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile $URL] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nLocation: $URL\n\nPlease go to <a href=\"$URL\">$URL</a>\n"


	set URL /elsewhere/foo.html
	set URL2 http://www/elsewhere/foo.html
	test ncgi-11.2 {ncgi::redirect} {
		set env(REQUEST_URI) http://www/cgi-bin/test.cgi
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) {}
		set env(SERVER_NAME) www.scriptics.com
		set env(SERVER_PORT) 80
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::setCookie -name CookieName -value 12345
			ncgi::redirect %s
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile $URL] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nLocation: $URL2\nSet-Cookie: CookieName=12345 ;\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"


	set URL foo.html
	set URL2 http://www.scriptics.com/cgi-bin/foo.html
	test ncgi-11.3 {ncgi::redirect} {
		set env(REQUEST_URI) http://www.scriptics.com/cgi-bin/test.cgi
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) {}
		set env(SERVER_NAME) www.scriptics.com
		set env(SERVER_PORT) 80
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::redirect %s
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile $URL] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"


	set URL foo.html
	set URL2 http://www.scriptics.com/cgi-bin/foo.html
	test ncgi-11.4 {ncgi::redirect} {
		set env(REQUEST_URI) /cgi-bin/test.cgi
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) {}
		set env(SERVER_NAME) www.scriptics.com
		set env(SERVER_PORT) 80
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::redirect %s
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile $URL] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"


	set URL foo.html
	set URL2 http://www.scriptics.com:8000/cgi-bin/foo.html
	test ncgi-11.5 {ncgi::redirect} {
		set env(REQUEST_URI) /cgi-bin/test.cgi
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) {}
		set env(SERVER_NAME) www.scriptics.com
		set env(SERVER_PORT) 8000
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::redirect %s
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile $URL] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"


	set URL foo.html
	set URL2 https://www.scriptics.com/cgi-bin/foo.html
	test ncgi-11.6 {ncgi::redirect} {
		set env(REQUEST_URI) /cgi-bin/test.cgi
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) {}
		set env(SERVER_NAME) www.scriptics.com
		set env(SERVER_PORT) 443
		set env(HTTPS) "on"
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::redirect %s
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile $URL] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"


	set URL  login.tcl
	set URL2 https://foo.com/cgi-bin/login.tcl
	test ncgi-11.7 {ncgi::redirect} {
		set env(REQUEST_URI) https://foo.com/cgi-bin/view.tcl?path=/a/b/c
		set env(REQUEST_METHOD) GET
		set env(QUERY_STRING) {}
		set env(SERVER_NAME) foo.com
		set env(SERVER_PORT) 443
		set env(HTTPS) "on"
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::redirect %s
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile $URL] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nLocation: $URL2\n\nPlease go to <a href=\"$URL2\">$URL2</a>\n"


	test ncgi-12.1 {ncgi::header} {
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::header
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\n\n"


	test ncgi-12.2 {ncgi::header} {
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::header text/plain
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/plain\n\n"


	test ncgi-12.3 {ncgi::header} {
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::header text/html X-Comment "This is a test"
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nX-Comment: This is a test\n\n"


	test ncgi-12.4 {ncgi::header} {
		makeFile [format {
		set auto_path {%s}
		if {[catch {
			source %s
			source %s
			source %s
			ncgi::setCookie -name Name -value {The+Value}
			ncgi::header
		} err]} {
			puts $err
		}
		exit
		} $sub_ap $cmdlFile $futlFile $ncgiFile] test1
		set f [open "|[list $::tcltest::tcltest test1]" r+]
		set res [read $f]
		close $f
		removeFile test1
		set res
	} "Content-Type: text/html\nSet-Cookie: Name=The+Value ;\n\n"


	test ncgi-14.1 {ncgi::multipart} {
		catch {ncgi::multipart "application/x-www-urlencoded" name=val+ue} err
		set err
	} {not a multipart message}

	test ncgi-14.2 {ncgi::multipart} {
		catch {ncgi::multipart "multipart/form-data" {}} err
		set err
	} {end-of-string encountered while parsing multipart/form-data}


	test ncgi-14.3 {ncgi::multipart} {
		set in [open [file join [file dirname [info script]] formdata.txt]]
		set X [read $in]
		close $in

		foreach line [split $X \n] {
		if {[string length $line] == 0} {
			break
		}
		if {[regexp {^Content-Type: (.*)$} $line x type]} {
			break
		}
		}
		regsub ".*?\n\n" $X {} X

		ncgi::multipart $type $X
	} [list \
		field1 [list value [list \
			Content-Disposition {form-data {name field1}} \
			Content-Type {text/plain {charset us-ascii}}
		]] \
		field2 [list {another value} [list \
			Content-Disposition {form-data {name field2}}
		]] \
		the_file_name [list {
<center><h1>
                  Netscape Address Book Sync for Palm Pilot
                                         User Guide
</h1></center>


} \
	[list \
		filename {C:Program FilesNetscapeCommunicatorProgramnareadme.htm} \
		name the_file_name
	]]]

	
	test ncgi-14.4 {ncgi::multipart} {
		set in [open [file join [file dirname [info script]] formdata.txt]]
		set X [read $in]
		close $in

		foreach line [split $X \n] {
		if {[string length $line] == 0} {
			break
		}
		if {[regexp {^Content-Type: (.*)$} $line x type]} {
			break
		}
		}
		regsub ".*?\n\n" $X {} X

		ncgi::reset body $X contenttype $type
		list [ncgi::get field1] [ncgi::get field2] [ncgi::get the_file_name]
	} {value {another value} {
<center><h1>
                  Netscape Address Book Sync for Palm Pilot
                                         User Guide
</h1></center>


}}

	variable binary_content "\r
	\r
	<center><h1>\r
					  Netscape Address Book Sync for Palm Pilot\r
											 User Guide\r
	</h1></center>\r
	\r
	"

	test ncgi-14.5 {ncgi::multipart--check binary file} {
		set X [genformdata $binary_content]
		ncgi::reset body $X contenttype [genformcontent_type]
		set content [ncgi::get the_file_name]
		list [ncgi::get field1] [ncgi::get field2] $content
	} [list value {another value} [string map [list \r {}] $binary_content]]



	test ncgi-14.6 {ncgi::multipart [query set]} {
		set in [open [file join [file dirname [info script]] formdata.txt]]
		set X [read $in]
		close $in

		foreach line [split $X \n] {
		if {[string length $line] == 0} {
			break
		}
		if {[regexp {^Content-Type: (.*)$} $line x type]} {
			break
		}
		}
		regsub ".*?\n\n" $X {} X

		ncgi reset body $X contenttype $type
		ncgi query set userval1 foo
		ncgi query set userval2 {a b}
		list [ncgi get field1] [ncgi get field2] [ncgi get userval1] [ncgi get userval2] [ncgi get the_file_name]
	} {value {another value} foo {a b} {
<center><h1>
                  Netscape Address Book Sync for Palm Pilot
                                         User Guide
</h1></center>


}}


	test ncgi-15.1.1 {ncgi query set} {
		ncgi reset querystring nameList=val+ue&nameList=value2
		ncgi query set foo 1
		ncgi query set bar {a b}
		list [ncgi get nameList] [ncgi get foo] [ncgi get bar]
	} {value2 1 {a b}}

	test ncgi-15.1.2 {ncgi query set} {
		ncgi reset querystring nameList=val+ue&nameList=value2
		ncgi query set foo 1
		ncgi query set bar {a b}
		list [ncgi all nameList] [ncgi get foo] [ncgi get bar]
	} {{{val ue} value2} 1 {a b}}




	## ------------ tests for binary content and file upload ----------------

	## some utility procedures to generate content 

	variable form_boundary {17661509020136}

	proc genformcontent_type {} {
		variable form_boundary
		return "multipart/form-data; boundary=\"$form_boundary\""
	}

	proc genformdatapart {name cd value} {
		variable form_boundary
		return "--$form_boundary\nContent-Disposition: form-data; name=\"$name\"$cd\n\n$value\n"
	}

	proc genformdata {bcontent} {
		variable form_boundary

		set a [genformdatapart field1 "" {value}]
		set b [genformdatapart field2 "" {another value}]
		set c [genformdatapart the_file_name "; filename=\"C:\\Program Files\\Netscape\\Communicator\\Program\\nareadme.htm\"\nContent-Type: text/html" $bcontent]

		return "$a$b$c--$form_boundary--\n" 
	}

	test ncgi-16.1 {ncgi::importFile} {
		set X [genformdata $binary_content]
		ncgi::reset body $X contenttype [genformcontent_type]
		ncgi::importFile -client the_file_name
	} {C:Program FilesNetscapeCommunicatorProgramnareadme.htm}


	test ncgi-16.2 {ncgi::importFile - content type} {
		global binary_content
		set X [genformdata $binary_content]
		ncgi::reset post $X contenttype [genformcontent_type]
		ncgi::importFile -type the_file_name
	} text/html


	test ncgi-16.3 {ncgi::importFile -- file contents} {
		global binary_content
		set X [genformdata $binary_content]
		ncgi::reset post $X contenttype [genformcontent_type]
		ncgi::importFile -data the_file_name
	} $binary_content


	test ncgi-16.4 {ncgi::importFile -- save file} {

		global binary_content

		set X [genformdata $binary_content]

		ncgi::reset post $X contenttype [genformcontent_type]
		ncgi::parse

		set localfile [ncgi::importFile -server the_file_name]

		# get the contents of the local file to verify
		set in [open $localfile]
		fconfigure $in -translation binary
		set content [read $in]
		close $in
		file delete $localfile
		set content

	} $binary_content


	test ncgi-16.5 {ncgi::importFile -- save file, given name} {

		global binary_content

		set X [genformdata $binary_content]

		ncgi::reset post $X contenttype [genformcontent_type]
		ncgi::parse

		set localfile [ncgi::importFile -server the_file_name fofo]

		# get the contents of the local file to verify
		set in [open $localfile]
		fconfigure $in -translation binary
		set content [read $in]
		close $in
		file delete $localfile
		set content

	} $binary_content


	test ncgi-16.6 {ncgi::importFile -- bad input} {

		set X "bad multipart data"

		ncgi::reset post $X contenttype [genformcontent_type]
		ncgi::parse

		ncgi::importFile -client the_file_name

	} {}


	test ncgi-17.1 {ncgi::names} {
		ncgi::reset querystring name=hello+world&name2=%7ewelch
		ncgi::names
	} {name name2}


	test ncgi-17.2 {ncgi::names} {
		ncgi::reset querystring name=&name2 contenttype application/x-www-urlencoded
		ncgi::names
	} {name}


	test ncgi-17.3 {ncgi::names} {
		ncgi::reset querystring name=&name2 \
			contenttype application/x-www-form-urlencoded
		ncgi::names
	} {name}


	test ncgi-17.4 {ncgi::names} {
		ncgi::reset querystring name=&name2 contenttype application/xyzzy
		set code [catch ncgi::names err]
		list $code $err
	} {1 {Unknown Content-Type: application/xyzzy}}

	# -------------------------------------------------------------------------

	testsuiteCleanup
	set [namespace current]::done 1
	return
}

after 0 [list ::coroutine [info cmdcount]_main [namespace current]::main]
vwait [namespace current]::done
return
