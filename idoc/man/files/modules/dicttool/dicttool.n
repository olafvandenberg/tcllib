'\"
'\" Generated from file 'dicttool\&.man' by tcllib/doctools with format 'nroff'
'\" Copyright (c) 2018 Sean Woods <yoda@etoyoc\&.com>
'\"
.TH "dicttool" n 1\&.2 tcllib "Extensions to the standard "dict" command"
.\" The -*- nroff -*- definitions below are for supplemental macros used
.\" in Tcl/Tk manual entries.
.\"
.\" .AP type name in/out ?indent?
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS ?type? ?name?
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .CS
.\"	Begin code excerpt.
.\"
.\" .CE
.\"	End code excerpt.
.\"
.\" .VS ?version? ?br?
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.  The first argument is ignored and used for recording
.\"	the version when the .VS was added, so that the sidebars can be
.\"	found and removed when they reach a certain age.  If another argument
.\"	is present, then a line break is forced before starting the sidebar.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
.\" .SO ?manpage?
.\"	Start of list of standard options for a Tk widget. The manpage
.\"	argument defines where to look up the standard options; if
.\"	omitted, defaults to "options". The options follow on successive
.\"	lines, in three columns separated by tabs.
.\"
.\" .SE
.\"	End of list of standard options for a Tk widget.
.\"
.\" .OP cmdName dbName dbClass
.\"	Start of description of a specific option.  cmdName gives the
.\"	option's name as specified in the class command, dbName gives
.\"	the option's name in the option database, and dbClass gives
.\"	the option's class in the option database.
.\"
.\" .UL arg1 arg2
.\"	Print arg1 underlined, then print arg2 normally.
.\"
.\" .QW arg1 ?arg2?
.\"	Print arg1 in quotes, then arg2 normally (for trailing punctuation).
.\"
.\" .PQ arg1 ?arg2?
.\"	Print an open parenthesis, arg1 in quotes, then arg2 normally
.\"	(for trailing punctuation) and then a closing parenthesis.
.\"
.\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
.\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1 \\fI\\$2\\fP (\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
.\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
.\"	# BS - start boxed text
.\"	# ^y = starting y location
.\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
.\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
.\"	# VS - start vertical sidebar
.\"	# ^Y = starting y location
.\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
.\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
.\"	# Special macro to handle page bottom:  finish off current
.\"	# box/sidebar if in box/sidebar mode, then invoked standard
.\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
.\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
.\"	# DE - end display
.de DE
.fi
.RE
.sp
..
.\"	# SO - start of list of standard options
.de SO
'ie '\\$1'' .ds So \\fBoptions\\fR
'el .ds So \\fB\\$1\\fR
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
.\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\*(So manual entry for details on the standard options.
..
.\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
.\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
.\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.\"	# UL - underline word
.de UL
\\$1\l'|0\(ul'\\$2
..
.\"	# QW - apply quotation marks to word
.de QW
.ie '\\*(lq'"' ``\\$1''\\$2
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\$2
..
.\"	# PQ - apply parens and quotation marks to word
.de PQ
.ie '\\*(lq'"' (``\\$1''\\$2)\\$3
.\"" fix emacs highlighting
.el (\\*(lq\\$1\\*(rq\\$2)\\$3
..
.\"	# QR - quoted range
.de QR
.ie '\\*(lq'"' ``\\$1''\\-``\\$2''\\$3
.\"" fix emacs highlighting
.el \\*(lq\\$1\\*(rq\\-\\*(lq\\$2\\*(rq\\$3
..
.\"	# MT - "empty" string
.de MT
.QW ""
..
.BS
.SH NAME
dicttool \- Dictionary Tools
.SH SYNOPSIS
package require \fBTcl  8\&.5\fR
.sp
proc \fBPROC\fR \fIname\fR \fIarglist\fR \fIbody\fR ?\fIninja\fR \fB\fR?
.sp
proc \fBnoop\fR ?\fIargs\fR?
.sp
proc \fBputb\fR ?\fImap\fR? \fItext\fR
.sp
proc \fBtcl::dict::getnull\fR \fIdictionary\fR ?\fIelement\fR? ?\fBelement\&.\&.\&.\fR?
.sp
proc \fBtcl::dict::is_dict\fR \fId\fR
.sp
proc \fBdicttool::is_branch\fR \fIdict\fR \fIpath\fR
.sp
proc \fBdicttool::print\fR \fIdict\fR
.sp
proc \fBdicttool::_dictputb\fR \fIlevel\fR \fIvarname\fR \fIdict\fR
.sp
proc \fBdicttool::sanitize\fR \fIdict\fR
.sp
proc \fBdicttool::_sanitizeb\fR \fIpath\fR \fIvarname\fR \fIdict\fR
.sp
proc \fBdicttool::canonical\fR \fIrawpath\fR
.sp
proc \fBdicttool::storage\fR \fIrawpath\fR
.sp
proc \fBdicttool::dictset\fR \fIvarname\fR ?\fIargs\fR?
.sp
proc \fBdicttool::dictmerge\fR \fIvarname\fR ?\fIargs\fR?
.sp
proc \fBdicttool::merge\fR ?\fIargs\fR?
.sp
proc \fBtcl::dict::isnull\fR \fIdictionary\fR ?\fIargs\fR?
.sp
proc \fBladd\fR \fIvarname\fR ?\fIelement\fR? ?\fBelement\&.\&.\&.\fR?
.sp
proc \fBldelete\fR \fIvarname\fR ?\fIelement\fR? ?\fBelement\&.\&.\&.\fR?
.sp
proc \fBlrandom\fR \fIlist\fR
.sp
.BE
.SH DESCRIPTION
.PP
The \fBdicttool\fR package enhances the standard \fIdict\fR command with several new
commands\&. In addition, the package also defines several "creature comfort" list commands as well\&.
Each command checks to see if a command already exists of the same name before adding itself,
just in case any of these slip into the core\&.
.SH COMMANDS
.TP
proc \fBPROC\fR \fIname\fR \fIarglist\fR \fIbody\fR ?\fIninja\fR \fB\fR?
Because many features in this package may be added as
commands to future tcl cores, or be provided in binary
form by packages, I need a declaritive way of saying
\fICreate this command if there isn't one already\fR\&.
The \fIninja\fR argument is a script to execute if the
command is created by this mechanism\&.
.TP
proc \fBnoop\fR ?\fIargs\fR?
Perform a noop\&. Useful in prototyping for commenting out blocks
of code without actually having to comment them out\&. It also makes
a handy default for method delegation if a delegate has not been
assigned yet\&.
.TP
proc \fBputb\fR ?\fImap\fR? \fItext\fR
Append a line of text to a variable\&. Optionally apply a string mapping\&.
.TP
proc \fBtcl::dict::getnull\fR \fIdictionary\fR ?\fIelement\fR? ?\fBelement\&.\&.\&.\fR?
If the path (given by the list of elements) exists, return that value\&.
Otherwise return an empty string\&. Designed to replace
.CS


 if {[dict exists $dictionary {*}$args]} {
   return [dict get $dictionary {*}$args]
 } else {
   return {}
 }

.CE
.sp
Example:
.CS

 set value [dict getnull $arglist $option]

.CE
.TP
proc \fBtcl::dict::is_dict\fR \fId\fR
Test if value is a dict\&.
.sp
This command is added to the \fBdict\fR ensemble as \fBdict is_dict\fR
.TP
proc \fBdicttool::is_branch\fR \fIdict\fR \fIpath\fR
Return true if the element  with the value
is a dict\&.  is given as a list to descend into sub-dicts of
the current dict\&.
The rules are as follows:
.RS
.IP [1]
If the last character of the last element of  is a colon (:)
return false
.IP [2]
If the last character of the last element of  is a slash (/)
return true
.IP [3]
If a sub-element if  named \fB\&.info\fR is present return true
.RE
.sp
.sp
This command is added to the \fBdict\fR ensemble as \fBdicttool::is_branch\fR
.sp
Example:
.CS

 > set mydict {sub/ {sub/ {field {A block of text}}}
 > dicttool::is_branch $mydict sub/
 1
 > dicttool::is_branch $mydict {sub/ sub/}
 1
 > dicttool::is_branch $mydict {sub/ sub/ field}
 0



.CE
.TP
proc \fBdicttool::print\fR \fIdict\fR
Output a dictionary as an indented stream of
data suitable for output to the screen\&. The system uses
the rules for \fBdicttool::is_branch\fR to determine if
an value in a dictionary is a leaf or a branch\&.
.sp
Example:
.CS

 > set mydict {sub/ {sub/ {field {A block of text}}}
 > dicttool::print $mydict
 sub/ {
   sub/ {
     field {A block of text}
   }
 }



.CE
.TP
proc \fBdicttool::_dictputb\fR \fIlevel\fR \fIvarname\fR \fIdict\fR
Helper function for ::dicttool::print
Formats the string representation for a dictionary element within
a human readable stream of lines, and determines if it needs to call itself
with further indentation to express a sub-branch
.TP
proc \fBdicttool::sanitize\fR \fIdict\fR
Output a dictionary removing any \&. entries added by \fBdicttool::merge\fR
.TP
proc \fBdicttool::_sanitizeb\fR \fIpath\fR \fIvarname\fR \fIdict\fR
Helper function for ::dicttool::sanitize
Formats the string representation for a dictionary element within
a human readable stream of lines, and determines if it needs to call itself
with further indentation to express a sub-branch
.TP
proc \fBdicttool::canonical\fR \fIrawpath\fR
Return the path as a canonical path for dicttool
with all branch keys
ending in a / and the final element ending in a /
if the final element in the path ended in a /
This command will also break arguments up if they
contain /\&.
.sp
Example:
.CS

 > dicttool::canonical foo bar baz bang
 foo/ bar/ baz/ bang
 > dicttool::canonical foo bar baz bang/
 foo/ bar/ baz/ bang/
 > dicttool::canonical foo bar baz bang:
 foo/ bar/ baz/ bang
 > dicttool::canonical foo/bar/baz bang:
 foo/ bar/ baz/ bang
 > dicttool::canonical foo/bar/baz/bang
 foo/ bar/ baz/ bang



.CE
.TP
proc \fBdicttool::storage\fR \fIrawpath\fR
Return the path as a storage path for dicttool
with all branch terminators removed\&.
This command will also break arguments up if they
contain /\&.
.sp
Example:
.CS

 > dicttool::storage foo bar baz bang
 foo bar baz bang
 > dicttool::storage foo bar baz bang/
 foo bar baz bang
 > dicttool::storage foo bar baz bang:
 foo bar baz bang
 > dicttool::storage foo/bar/baz bang:
 foo bar baz bang
 > dicttool::storage foo/bar/baz/bang
 foo bar baz bang



.CE
.TP
proc \fBdicttool::dictset\fR \fIvarname\fR ?\fIargs\fR?
Set an element with a recursive dictionary,
marking all branches on the way down to the
final element\&.
If the value does not exists in the nested dictionary
it is added as a leaf\&. If the value already exists as a branch
the value given is merged if the value is a valid dict\&. If the
incoming value is not a valid dict, the value overrides the value
stored, and the value is treated as a leaf from then on\&.
.sp
Example:
.CS

 > set r {}
 > ::dicttool::dictset r option color default Green
 \&. 1 option {\&. 1 color {\&. 1 default Green}}
 > ::dicttool::dictset r option {Something not dictlike}
 \&. 1 option {Something not dictlike}
 # Note that if the value is not a dict, and you try to force it to be
 # an error with be thrown on the merge
 > ::dicttool::dictset r option color default Blue
 missing value to go with key



.CE
.TP
proc \fBdicttool::dictmerge\fR \fIvarname\fR ?\fIargs\fR?
A recursive form of dict merge, intended for modifying variables in place\&.
.sp
Example:
.CS

 > set mydict {sub/ {sub/ {description {a block of text}}}}
 > ::dicttool::dictmerge mydict {sub/ {sub/ {field {another block of text}}}}]
 > dicttool::print $mydict
 sub/ {
   sub/ {
     description {a block of text}
     field {another block of text}
   }
 }



.CE
.TP
proc \fBdicttool::merge\fR ?\fIargs\fR?
A recursive form of dict merge
.sp
A routine to recursively dig through dicts and merge
adapted from http://stevehavelka\&.com/tcl-dict-operation-nested-merge/
.sp
Example:
.CS

 > set mydict {sub/ {sub/ {description {a block of text}}}}
 > set odict [dicttool::merge $mydict {sub/ {sub/ {field {another block of text}}}}]
 > dicttool::print $odict
 sub/ {
   sub/ {
     description {a block of text}
     field {another block of text}
   }
 }



.CE
.TP
proc \fBtcl::dict::isnull\fR \fIdictionary\fR ?\fIargs\fR?
Returns true if the path specified by args either does not exist,
if exists and contains an empty string or the value of NULL or null\&.
.sp
This function is added to the global dict ensemble as \fBdict isnull\fR
.TP
proc \fBladd\fR \fIvarname\fR ?\fIelement\fR? ?\fBelement\&.\&.\&.\fR?
Add elements to a list if that are not already present in the list\&.
As a side effect, if variable  does not exists,
create it as an empty list\&.
.sp
Example:
.CS

 ladd contents foo bar
 puts $contents
 > foo bar
 ladd contents foo bar baz bang
 puts $contents
 > foo bar baz bang



.CE
.TP
proc \fBldelete\fR \fIvarname\fR ?\fIelement\fR? ?\fBelement\&.\&.\&.\fR?
Delete all instances of the elements given from a list contained in \&.
If the variable does exist this is a noop\&.
.sp
Example:
.CS

 set contents {foo bar baz bang foo foo foo}
 ldelete contents foo
 puts $contents
 > bar baz bang



.CE
.TP
proc \fBlrandom\fR \fIlist\fR
Return a random element from
.PP
.SH AUTHORS
Sean Woods \fImailto:<yoda@etoyoc\&.com>\fR
.PP
.SH "BUGS, IDEAS, FEEDBACK"
This document, and the package it describes, will undoubtedly contain
bugs and other problems\&.
Please report such in the category \fIdict\fR of the
\fITcllib Trackers\fR [http://core\&.tcl\&.tk/tcllib/reportlist]\&.
Please also report any ideas for enhancements you may have for either
package and/or documentation\&.
.PP
When proposing code changes, please provide \fIunified diffs\fR,
i\&.e the output of \fBdiff -u\fR\&.
.PP
Note further that \fIattachments\fR are strongly preferred over
inlined patches\&. Attachments can be made by going to the \fBEdit\fR
form of the ticket immediately after its creation, and then using the
left-most button in the secondary navigation bar\&.
.SH KEYWORDS
dict
.SH CATEGORY
Utilities
.SH COPYRIGHT
.nf
Copyright (c) 2018 Sean Woods <yoda@etoyoc\&.com>

.fi